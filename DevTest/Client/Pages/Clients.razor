@page "/Clients"
@inject ClientService clientService
@inject SpinnerService spinner
@inject IToastService toastr

<h2>List of Clients</h2>

<div class="row">
    <div class="col-12 d-flex my-3">
        <a @onclick="AddNewClient" class="btn btn-outline-primary">Add New Client </a>
    </div>
</div>

@if (clients.Count < 1)
{
    <h3>No client(s) found</h3>
}
else{
    <table class="table table-primary table-striped">
        <thead>
            <tr>
                <td>Name</td>
                <td>Client code</td>
                <td>No. of linked contacts</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr onclick="document.location = 'ViewClient/@client.ClientID.ToString()'">
                    <td>@client.Name</td>
                    <td>@client.ClientCode</td>
                    <td align="center">@client.LinkedContacts</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [CascadingParameter] public IModalService modalService { get; set; } = default!;

    List<ClientDto> clients = new List<ClientDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            spinner.Show();
            await LoadClients();
            spinner.Hide();
        }
        catch (Exception)
        {
            toastr.ShowError("An error occured on load.Please reload the page");
        }

        await base.OnInitializedAsync();
    }

    public async Task LoadClients()
    {
        var response = await clientService.GetAllClientsWithContactCount();

        if (!response?.Success ?? true)
        {
            toastr.ShowError(response?.Message ?? "An error occured");
            spinner.Hide();
            return;
        }

        clients = response?.Content ?? new List<ClientDto>();
    }

    public async Task AddNewClient()
    {
        var modal = modalService.Show<AddClient>("Create new client");
        await modal.Result;
        await LoadClients();
    }


}
