@page "/ViewContact/{contactId:int}"
@inject ContactService contactService
@inject SpinnerService spinner
@inject IToastService toastr
@inject NavigationManager navigator
<div class="mt-4 mb-4">
    <button class="btn btn-outline-primary" @onclick="@ShowModal" style='visibility: @(_contact.ContactId > 0 ? "visible" : "hidden")' >Link Clients</button>
</div>
<TabControl>
    <TabPage Text="General">
        <EditForm Model="_contact" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            <div class="row mb-3">
                <div class="col-4">
                    <div class="form-group">
                        <label>Name</label>
                        <InputText class="form-control" @bind-Value="_contact.Name" />
                        <ValidationMessage For="@(()=>_contact.Name)" />
                    </div>
                </div>
                <div class="col-4">
                    <div class="form-group">
                        <label>Surname</label>
                        <InputText class="form-control" @bind-Value="_contact.Surname" />
                        <ValidationMessage For="@(()=>_contact.Surname)" />
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-4">
                    <div class="form-group">
                        <label>Email Address</label>
                        <InputText class="form-control" @bind-Value="_contact.EmailAddress" />
                        <ValidationMessage For="@(()=>_contact.EmailAddress)" />
                    </div>
                </div>
            </div>
            <div>
                <button type="submit" class="btn btn-primary" style='visibility: @(_contact.ContactId > 0 ?  "hidden" : "visible" )'>Save Contact</button>
            </div>
        </EditForm>
    </TabPage>
    <TabPage Text="Client(s)">
        @if (clients.Count < 1)
        {
            <h2>No Clients Found</h2>
        }
        else
        {
            <table class="table table-striped table-dark table-hover table-bordered">
                <thead>
                    <tr>
                        <th>Client Name</th>
                        <th>Client Code</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var client in clients)
                    {
                        <tr>
                            <td>@client.Name </td>
                            <td>@client.ClientCode</td>
                            <td><a href='@($"/Unlink/{contactId}/{client.ClientID}")' class="btn btn-primary btn-link">Unlink</a></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </TabPage>
</TabControl>

@code {
    [Parameter]
    public int contactId { get; set; }

    [CascadingParameter]
    public IModalService modalService { get; set; }

    public Contact _contact = new Contact();
    public List<ClientDto> clients = new List<ClientDto>();

    protected override async Task OnInitializedAsync()
    {
        if (contactId > 0)
        {
            spinner.Show();
            try
            {
                var response = await contactService.GetContactById(contactId);
                var result = await GetLinkedClients(contactId);
                if (!response?.Success ?? true && result)
                {
                    spinner.Hide();
                    toastr.ShowError(response?.Message ?? "Something went wrong");
                    return;
                }

                _contact = response?.Content ?? new Contact();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                toastr.ShowError("Error occured on load. Please reload the page");
            }
            spinner.Hide();
        }

        await base.OnInitializedAsync();
    }

    private async Task<bool> GetLinkedClients(int contactId)
    {
        var response = await contactService.GetContactClients(contactId);
        if (response == null) return false;
        if(response.Success){
            clients = response.Content;
            return true;
        }
        return false;
    }

    private void Redirect(string url){
        navigator.NavigateTo(url, false);
    }

    private async void ShowModal()
    {
        var parameters = new ModalParameters();
        parameters.Add("ContactId", contactId);
        var modal = modalService.Show<LinkClient>("", parameters);
        await modal.Result;
        if(!await GetLinkedClients(contactId)){
            toastr.ShowError("Failed to refresh data. Please reload page");
        }

    }

    private async void Submit()
    {
        try
        {
            spinner.Show();
            if (_contact.ContactId <= 0)
            {
                ResponseModel<Contact>? contact = await contactService.SaveContact(_contact);
                if (!contact?.Success ?? true)
                {
                    spinner.Hide();
                    toastr.ShowError(contact?.Message ?? "Something went wrong");
                    return;
                }

                _contact = contact?.Content ?? new Contact();
                contactId = _contact.ContactId;
                spinner.Hide();
                StateHasChanged();
                toastr.ShowSuccess("Contact saved sucessfully");
            }
            else
            {
                var _result = await contactService.UpdateContact(_contact);
                if (!_result?.Success ?? true)
                {
                    spinner.Hide();
                    toastr.ShowError(_result?.Message ?? "Something went wrong");
                    return;
                }

                spinner.Hide();
                StateHasChanged();
                toastr.ShowSuccess("Contact updated sucessfully");
            }

        }
        catch (Exception)
        {
            spinner.Hide();
            toastr.ShowError("Error occured on saving.Please try again");
        }
    }
}
