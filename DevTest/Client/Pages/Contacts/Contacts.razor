@page "/Contacts"
@inject ContactService contactService
@inject SpinnerService spinner
@inject IToastService toastr
@inject NavigationManager navigator

<h2>List of Contacts</h2>

<div class="row">
    <div class="col-12 d-flex my-3">
        <a @onclick="@(()=>Navigate(0))" class="btn btn-outline-primary">Add New Contact </a>
    </div>
</div>

@if (_contacts.Count < 1)
{
    <h3>No contact(s) found</h3>
}
else
{
    <table class="table table-dark table-hover table-striped table-bordered" style="cursor:pointer" >
        <thead>
            <tr>
                <td>Name</td>
                <td>Surname</td>
                <td>Email Address</td>
                <td align="center">No. of linked clients</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var contact in _contacts)
            {
                <tr @onclick="() => Navigate(contact.ContactId)">
                    <td>@contact.Name</td>
                    <td>@contact.Surname</td>
                    <td>@contact.EmailAddress</td>
                    <td align="center">@contact.LinkedClients</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [CascadingParameter] public IModalService modalService { get; set; } = default!;

    List<ContactDto> _contacts = new List<ContactDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            spinner.Show();
            await LoadContacts();
            spinner.Hide();
        }
        catch (Exception)
        {
            toastr.ShowError("Error occured on load.Please reload the page");
        }
        finally{
            spinner.Hide();
        }

        await base.OnInitializedAsync();
    }

    private void Navigate(int contactId)
    {
        navigator.NavigateTo($"ViewContact/{contactId}");
    }


    public async Task LoadContacts(){
        var response = await contactService.GetAllContactsWithClientCount();

        if (!response?.Success ?? true)
        {
            spinner.Hide();
            toastr.ShowError(response?.Message ?? "Something went wrong");
            return;
        }

        _contacts = response?.Content ?? new List<ContactDto>();
    }

    public async Task AddNewContact()
    {
        var modal = modalService.Show<AddContact>("Create new contact");
        await modal.Result;
        await LoadContacts();
    }

}
